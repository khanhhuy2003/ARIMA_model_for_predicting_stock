# -*- coding: utf-8 -*-
"""Vnindex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xO6D2Drh7Oc3WukClddu15P6-tCzewhA
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.core.debugger import set_trace

import numpy as np
import pandas as pd
import os
import io
import matplotlib.pyplot as plt
import time
from google.colab import files

uploaded_full = files.upload()
uploaded = files.upload()
uploaded_10years = files.upload()

# %matplotlib inline
# 
df_full = pd.read_csv(io.BytesIO(uploaded_full['Vnindex_t7-t3.csv'])).dropna()

df_full.columns=["Date","Close"]
df_full['Date']=pd.to_datetime(
df_full['Date'], format = '%d/%m/%Y')
df_full.set_index('Date',inplace=True)
df_full[['Close']].plot()


df = pd.read_csv(io.BytesIO(uploaded['Vnindex_t7-t12.csv'])).dropna()

df.columns=["Date","Close"]
df['Date']=pd.to_datetime(df['Date'], format = '%d/%m/%Y')
df.set_index('Date',inplace=True)
df[['Close']].plot()

df_10 = pd.read_csv(io.BytesIO(uploaded_10years['Vnindex_10years.csv'])).dropna()

df_10.columns=["Date","Close"]
df_10['Date']=pd.to_datetime(
df_10['Date'], format = '%d/%m/%Y')
df_10.set_index('Date',inplace=True)
df_10[['Close']].plot()

from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.graphics.tsaplots import plot_acf

from statsmodels.tsa.stattools import adfuller

data_diff_1 = df_10['Close'].dropna()
dataX_1 = data_diff_1.values
fuller_1 = adfuller(dataX_1)
print('ADF Statistic: %f' % fuller_1[0])
print('p-value: %f' % fuller_1[1])

data_diff= df_10['Close'].diff().dropna()
dataX = data_diff.values
fuller = adfuller(dataX)
print('ADF Statistic: %f' % fuller[0])
print('p-value: %f' % fuller[1])

"""We choose d=1"""

train = df_10[:2995]
test = df_10[-58:]

plt.figure(figsize=(19,9))
plt.plot(train)
plt.plot(test)

test

df_diff = df_10['Close'].diff().dropna()
acf_diff = plot_acf(df_diff)
pacf_diff = plot_pacf(df_diff)

from pmdarima.arima import auto_arima

arima_model = auto_arima(df_10,start_p=0, d=1,
start_q=0,
max_p=4, max_d=2, max_q=4, start_P=0,
D=0, start_Q=0, max_P=4, max_D=2, max_Q=4, m=12, seasonal=True,
error_action= 'warn', trace = True,
supress_warnings=True,stepwise = True,
random_state=20,n_fits = 50 )

arima_model.summary()

prediction = pd.DataFrame(arima_model.predict(n_periods=20),index=test.index)
prediction.columns = ['predicted _sales']
prediction



result = arima_model.fit()



from statsmodels.tsa.arima.model import ARIMA

model = ARIMA(df_10['Close'], order=(1,1,3))

result = model.fit()

from statsmodels.tsa.arima.model import ARIMA

model_cross = ARIMA(df_10['Close'], order=(2,1,2))

result_cross = model_cross.fit()

print(result.summary())

df['forecast'] = result.predict(start=1,dynamic=False)
df[['Close','forecast']].plot()

df_cross=df

arima_value_forecast = result.get_forecast(steps=90).predicted_mean
arima_value_forecast

arima_value_forecast_cross = result_cross.get_forecast(steps=90).predicted_mean
arima_value_forecast_cross

from pandas.tseries.offsets import DateOffset
future_dates=[df.index[-1]+ DateOffset(days=x)for x in range(0,91)]

df_cross = df

from pandas.tseries.offsets import DateOffset
future_dates_cross=[df_cross.index[-1]+ DateOffset(days=x)for x in range(0,91)]

future_datest_df = pd.DataFrame(index = future_dates[1:], columns = df.columns)
future_datest_df['forecast'] = arima_value_forecast.values
future_df = pd.concat([df,future_datest_df])

future_datest_df_cross = pd.DataFrame(index = future_dates_cross[1:], columns = df_cross.columns)
future_datest_df_cross['forecast'] = arima_value_forecast_cross.values
future_df_cross = pd.concat([df,future_datest_df_cross])

df_full.plot(figsize=(15,9))
plt.title("Vnidex from July to March")
future_df_cross[['Close','forecast']].plot(figsize=(15,9))
plt.title("Cross model APH for Vnindex")
future_df[['Close','forecast']].plot(figsize=(15,9))
plt.title("Vnidex model")

fc=df_full[130:]
fc['forecast'] = np.array(future_datest_df['forecast'][len(future_datest_df)-58:])
fc[['Close','forecast']].plot(figsize=(15,9))